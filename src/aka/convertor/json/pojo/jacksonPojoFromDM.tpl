package ${package};
#set($myList = [])

#foreach( $column in $comp.Nodes ) 
#if ( $column.Type == "java.util.Date" )
#if (!$myList.contains(${column.DeserName}))
#set($success = $myList.add(${column.DeserName}))
import ${package}.deserialisers.${column.DeserName}Deserializer;
#end
#end
#end

#if( $comp.ContainList == "true" )
import java.util.ArrayList;
import java.util.List;
#end
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
#if( $comp.ContainJsonProperty == "true" )
import com.fasterxml.jackson.annotation.JsonProperty;
#end
#if( $comp.ContainDeserialiser == "true" )
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
#end

/**
 * Simple pojo 
 *
 * Generated by JetTools, do not edit this file directly.
 * 
 * @author JetToolsFramework
 */ 
@JsonIgnoreProperties(ignoreUnknown = true) 
public final class ${comp.Name} {

#foreach( $column in $comp.Nodes ) 
#if (${column.SerName} != ${column.Name})
    @JsonProperty("${column.SerName}")
#end
#if ( $column.Type == "java.util.Date" )
    @JsonDeserialize(using = ${column.DeserName}Deserializer.class)
#end
#if ( $column.Type == "List" )
    private List<${column.Subtype}> ${column.Name};
#else 
    private ${column.Type} ${column.Name};
#end
#end

    /**
     * Empty Constructor
     */
    public ${comp.Name}() {
        super();
#foreach( $column in $comp.Nodes ) 
#if ( $column.Type == "List" )
        this.${column.Name} = new ArrayList<${column.Subtype}>();
#else 
        this.${column.Name} = null;
#end
#end
    }

    /**
     * Filling Constructor
     *
#foreach( $column in $comp.Nodes )
     * @param ${column.Name} #if ( $column.Type == "List" )List<${column.Subtype}>#else${column.Type}#end
     
#end
     */
    public ${comp.Name}(#foreach( $column in $comp.Nodes )final #if ( $column.Type == "List" )List<${column.Subtype}> ${column.Name}#else${column.Type} ${column.Name}#end#if($foreach.count != $comp.Nodes.size()), #end#end) {
        super();
#foreach( $column in $comp.Nodes ) 
#if ( $column.Type == "List" )
        this.${column.Name} = ${column.Name};
#else 
        this.${column.Name} = ${column.Name};
#end
#end
    }
#foreach( $column in $comp.Nodes ) 
    
    /**
     * Get value of ${column.Name}
     *
#if ( $column.Type == "List" )     
     * @return List<${column.Subtype}> value of ${column.Name}
     */
    public final List<${column.Subtype}> get${util.firstLetterUpperCase( $column.Name )}() {
#else 
     * @return ${column.Type} value of ${column.Name}
     */
    public final ${column.Type} get${util.firstLetterUpperCase( $column.Name )}() {
#end
        return this.${column.Name};
    }
#end
#foreach( $column in $comp.Nodes ) 
    
    /**
     * Set value of ${column.Name}
     *
     * @param ${column.Name}
#if ( $column.Type == "List" )     
     */
    public final void set${util.firstLetterUpperCase( $column.Name )}(List<${column.Subtype}>  ${column.Name}) {
#else 
     */
    public final void set${util.firstLetterUpperCase( $column.Name )}(final ${column.Type}  ${column.Name}) {
#end
        this.${column.Name} = ${column.Name};
    }  
#end

}